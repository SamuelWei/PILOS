name: CI

on:
  push:
    branches: [ master ]
  pull_request:
jobs:
  pilos-backend:
    name: Backend (PHP ${{ matrix.php-versions }})
    runs-on: ubuntu-latest

    services:
      mariadb:
        image: mariadb:10
        ports:
          - 3306
        env:
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_DATABASE: test
          MYSQL_ROOT_PASSWORD: password
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3

    strategy:
      fail-fast: false
      matrix:
        php-versions: ['8.1']
    steps:
    - name: Setup B3Scale
      run: |
        curl -L https://github.com/b3scale/b3scale/releases/download/1.0.2/b3scalectl_1.0.2_linux_amd64.tar.gz | tar -xz
        mv b3scalectl /usr/local/bin
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 2
    - name: Verify MariaDB connection
      env:
        PORT: ${{ job.services.mariadb.ports[3306] }}
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P"$PORT" --silent; do
          sleep 1
        done
    - name: Setup PHP, with composer and extensions
      uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: bcmath, ctype, fileinfo, json, mbstring, dom, ldap, pdo, tokenizer, xml, mysql, sqlite
        coverage: pcov
    - name: Install pipe viewer tool
      run: |
          sudo apt-get update
          sudo apt-get install pv
    - name: Copy .env
      run: php -r "copy('.env.ci', '.env');"
    - name: Get Composer Cache Directory
      id: composer-cache
      run: |
        echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Get composer cache keys
      uses: actions/cache@v2
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-${{ matrix.php-versions }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.php-versions }}-composer-
    - name: Install php dependencies
      run: |
        composer self-update
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    - name: Generate key
      run: php artisan key:generate
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    - name: Migrate Database
      env:
        DB_PORT: ${{ job.services.mariadb.ports[3306] }}
        DB_DATABASE: test
        DB_USERNAME: root
        DB_PASSWORD: password
      run: php artisan migrate --no-interaction -vvv
    - name: Execute code style check via php-cs-fixer
      run: vendor/bin/php-cs-fixer fix --dry-run --allow-risky=yes
    - name: Create BBB Testing Frontend
      id: create-bbb-frontend
      env:
        B3SCALE_API_JWT_SECRET: ${{ secrets.B3SCALE_API_JWT_SECRET }}  
      run: |
        shopt -s expand_aliases
        alias b3s='b3scalectl --api ${{ secrets.B3SCALE_HOST }}'
        export BBB_SECRET=$(openssl rand -hex 42)
        export BBB_TENANT=github-ci-$(openssl rand -hex 12)
        mkdir -p /home/runner/.config/b3scale/
        echo -n "$B3SCALE_API_JWT_SECRET" > ${{ secrets.B3SCALE_ACCESS_TOKEN_FILE }}
        b3s add frontend --secret "$BBB_SECRET" $BBB_TENANT
        b3s set frontend -j '{"required_tags":["bbb_github_ci"]}' $BBB_TENANT 
        export TESTING_BBB="'[{\"url\":\"${{ secrets.B3SCALE_HOST }}bbb/${BBB_TENANT}/bigbluebutton/\",\"secret\":\"${BBB_SECRET}\"}]'"
        sed -i "s|TESTING_BBB=.*|TESTING_BBB=$TESTING_BBB|g"  .env
        echo "BBB_TENANT=$BBB_TENANT" >> "$GITHUB_ENV"
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_PORT: ${{ job.services.mariadb.ports[3306] }}
        DB_DATABASE: test
        DB_USERNAME: root
        DB_PASSWORD: password
      run: php artisan test --parallel --coverage-clover=coverage.xml
    - name: End all BBB meetings
      if: ${{ always() && steps.create-bbb-frontend.outcome == 'success'}}
      run: |
        curl -L https://raw.githubusercontent.com/defnull/bbbctl/master/src/bbbctl.py -o /usr/local/bin/bbbctl
        chmod +x /usr/local/bin/bbbctl
        export BBBCTL_SERVER=${{ secrets.B3SCALE_HOST }}bbb/${BBB_TENANT}/bigbluebutton/api
        export BBBCTL_SECRET=$(openssl rand -hex 42)
        b3scalectl --api ${{ secrets.B3SCALE_HOST }} set  frontend --secret "$BBBCTL_SECRET" $BBB_TENANT
        bbbctl meeting nuke
    - name: Remove BBB Testing Frontend
      if: ${{ always() && steps.create-bbb-frontend.outcome == 'success'}}
      run: |
        b3scalectl --api ${{ secrets.B3SCALE_HOST }} delete frontend $BBB_TENANT
    - name: Upload coverage
      uses: codecov/codecov-action@v3
    - name: Upload laravel logs
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: ${{ runner.os }}-${{ matrix.php-versions }}-laravel.log
        path: storage/logs/laravel.log
  pilos-frontend:
          name: Frontend
          runs-on: ubuntu-latest
          steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Copy .env
              run: php -r "copy('.env.example', '.env');"
            - name: Get NPM Cache Directory
              id: npm-cache
              run: |
                echo "::set-output name=dir::$(npm config get cache)"
            - name: Get NPM Cache Keys
              uses: actions/cache@v2
              with:
                path: ${{ steps.npm-cache.outputs.dir }}
                key: ${{ runner.os }}-${{ matrix.php-versions }}-node-${{ hashFiles('**/package-lock.json') }}
                restore-keys: |
                  ${{ runner.os }}-${{ matrix.php-versions }}-node-
            - name: Install dependencies
              run: npm ci
            - name: Execute frontend code style check via eslint
              run: npm run lint
            - name: Execute frontend tests
              env:
                LARAVEL_BYPASS_ENV_CHECK: 1
              run: npm run cover
            - name: Upload coverage
              uses: codecov/codecov-action@v3
            - name: Upload npm logs
              uses: actions/upload-artifact@v2
              if: failure()
              with:
                name: npm-debug.log
                path: /home/runner/.npm/_logs/*-debug.log
