<?php

namespace Tests\Feature\api\v1\Room;

use App\Enums\RoomUserRole;
use App\Room;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class FileTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected $user, $room;
    protected $file_valid, $file_wrongmime, $file_toobig;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Storage::fake('local');
        $this->user           = factory(User::class)->create();
        $this->room           = factory(Room::class)->create();
        $this->file_valid     = UploadedFile::fake()->create('document.pdf', config('bigbluebutton.max_filesize') - 1, 'application/pdf');
        $this->file_wrongmime = UploadedFile::fake()->create('documents.zip', config('bigbluebutton.max_filesize') - 1, 'application/zip');
        $this->file_toobig    = UploadedFile::fake()->create('document.pdf', config('bigbluebutton.max_filesize') + 1, 'application/pdf');
    }

    public function testUploadValidFile()
    {
        $this->postJson(route('api.v1.rooms.files.add', ['room'=>$this->room]), ['file' => $this->file_valid])
            ->assertUnauthorized();

        // Testing guests
        $this->postJson(route('api.v1.rooms.files.add', ['room'=>$this->room]), ['file' => $this->file_valid])
            ->assertUnauthorized();

        // Testing user
        $this->actingAs($this->user)->postJson(route('api.v1.rooms.files.add', ['room'=>$this->room]), ['file' => $this->file_valid])
            ->assertForbidden();

        // Testing member
        $this->room->members()->attach($this->user, ['role'=>RoomUserRole::USER]);
        $this->actingAs($this->user)->postJson(route('api.v1.rooms.files.add', ['room'=>$this->room]), ['file' => $this->file_valid])
            ->assertForbidden();

        // Testing moderator member
        $this->room->members()->sync([$this->user->id,['role'=>RoomUserRole::MODERATOR]]);
        $this->actingAs($this->user)->postJson(route('api.v1.rooms.files.add', ['room'=>$this->room]), ['file' => $this->file_valid])
            ->assertForbidden();

        // Testing owner
        $this->actingAs($this->room->owner)->postJson(route('api.v1.rooms.files.add', ['room'=>$this->room]), ['file' => $this->file_valid])
            ->assertSuccessful();

        Storage::disk('local')->assertExists($this->room->id.'/'.$this->file_valid->hashName());
    }

    public function testUploadInvalidFile()
    {
        // No file
        $this->actingAs($this->room->owner)->postJson(route('api.v1.rooms.files.add', ['room'=>$this->room]))
            ->assertJsonValidationErrors('file');

        // File invalid file type
        $this->actingAs($this->room->owner)->postJson(route('api.v1.rooms.files.add', ['room'=>$this->room]), ['file' => $this->file_wrongmime])
            ->assertJsonValidationErrors('file');
        Storage::disk('local')->assertMissing($this->room->id.'/'.$this->file_wrongmime->hashName());

        // File too large
        $this->actingAs($this->room->owner)->postJson(route('api.v1.rooms.files.add', ['room'=>$this->room]), ['file' => $this->file_toobig])
            ->assertJsonValidationErrors('file');
        Storage::disk('local')->assertMissing($this->room->id.'/'.$this->file_toobig->hashName());
    }

    public function testViewFiles()
    {
        $this->actingAs($this->room->owner)->postJson(route('api.v1.rooms.files.get', ['room'=>$this->room]), ['file' => $this->file_valid])
            ->assertSuccessful();

        \Auth::logout();

        // Testing guests
        $this->getJson(route('api.v1.rooms.files.get', ['room'=>$this->room]))
            ->assertUnauthorized();

        // Testing users
        $this->actingAs($this->user)->postJson(route('api.v1.rooms.files.get', ['room'=>$this->room]))
            ->assertForbidden();

        // Testing member
        $this->room->members()->attach($this->user, ['role'=>RoomUserRole::USER]);
        $this->actingAs($this->user)->getJson(route('api.v1.rooms.files.get', ['room'=>$this->room]))
            ->assertForbidden();

        // Testing moderator member
        $this->room->members()->sync([$this->user->id,['role'=>RoomUserRole::MODERATOR]]);
        $this->actingAs($this->user)->getJson(route('api.v1.rooms.files.get', ['room'=>$this->room]))
            ->assertForbidden();

        // Testing owner
        $this->actingAs($this->room->owner)->getJson(route('api.v1.rooms.files.get', ['room'=>$this->room]))
            ->assertSuccessful()
            ->assertJsonFragment(['filename'=>$this->file_valid->name]);

        // -- Testing shared file list --

        // File not shared
        $this->actingAs($this->user)->getJson(route('api.v1.rooms.show', ['room'=>$this->room]))
            ->assertJsonCount(0, 'data.files');

        $room_file           = $this->room->files()->where('filename', $this->file_valid->name)->first();
        $room_file->download = true;
        $room_file->save();

        // File shared
        $this->actingAs($this->user)->getJson(route('api.v1.rooms.show', ['room'=>$this->room]))
            ->assertJsonCount(1, 'data.files')
            ->assertJsonFragment(['filename'=>$this->file_valid->name]);
    }

    public function testDownloadFilesDownload()
    {
        $this->actingAs($this->room->owner)->postJson(route('api.v1.rooms.files.get', ['room'=>$this->room]), ['file' => $this->file_valid])
            ->assertSuccessful();
        $room_file           = $this->room->files()->where('filename', $this->file_valid->name)->first();
        $room_file->download = true;
        $room_file->save();
        \Auth::logout();

        // Access as guest, without guest access
        $this->get($room_file->downloadLink())
            ->assertForbidden();

        // Allow guest access
        $this->room->allowGuests = true;
        $this->room->save();
        $this->get($room_file->downloadLink())
            ->assertSuccessful();

        // Testing user
        $this->actingAs($this->user)->get($room_file->downloadLink())
            ->assertSuccessful();

        // Testing member
        $this->room->members()->attach($this->user, ['role'=>RoomUserRole::USER]);
        $this->actingAs($this->user)->get($room_file->downloadLink())
            ->assertSuccessful();

        // Testing moderator member
        $this->room->members()->sync([$this->user->id,['role'=>RoomUserRole::MODERATOR]]);
        $this->actingAs($this->user)->get($room_file->downloadLink())
            ->assertSuccessful();

        // Testing owner
        $this->actingAs($this->room->owner)->get($room_file->downloadLink())
            ->assertSuccessful();
    }

    public function testDownloadFilesDownloadWithAccessCode()
    {
        $this->actingAs($this->room->owner)->postJson(route('api.v1.rooms.files.get', ['room'=>$this->room]), ['file' => $this->file_valid])
            ->assertSuccessful();
        $this->room->accessCode  = $this->faker->numberBetween(111111111, 999999999);
        $this->room->save();
        $room_file           = $this->room->files()->where('filename', $this->file_valid->name)->first();
        $room_file->download = true;
        $room_file->save();
        \Auth::logout();

        // Access as guest, without guest access and without access code
        $this->get($room_file->downloadLink())
            ->assertForbidden();

        // Access as guest, without guest access and with access code
        $this->get(route('download.file', ['room'=>$this->room->id, 'roomFile' => $room_file,'filename'=>$room_file->filename,'code'=>$this->room->accessCode]))
            ->assertForbidden();

        // Allow guest access
        $this->room->allowGuests = true;
        $this->room->save();

        // Access as guest, with guest access and without access code
        $this->get($room_file->downloadLink())
            ->assertForbidden();

        // Access as guest, with guest access and access code
        $this->get(route('download.file', ['room'=>$this->room->id, 'roomFile' => $room_file,'filename'=>$room_file->filename,'code'=>$this->room->accessCode]))
            ->assertSuccessful();

        // Testing user without access code
        $this->actingAs($this->user)->get($room_file->downloadLink())
            ->assertForbidden();

        // Testing user with access code
        $this->actingAs($this->user)->get(route('download.file', ['room'=>$this->room->id, 'roomFile' => $room_file,'filename'=>$room_file->filename,'code'=>$this->room->accessCode]))
            ->assertSuccessful();

        // Testing member
        $this->room->members()->attach($this->user, ['role'=>RoomUserRole::USER]);
        $this->actingAs($this->user)->get($room_file->downloadLink())
            ->assertSuccessful();

        // Testing moderator member
        $this->room->members()->sync([$this->user->id,['role'=>RoomUserRole::MODERATOR]]);
        $this->actingAs($this->user)->get($room_file->downloadLink())
            ->assertSuccessful();

        // Testing owner
        $this->actingAs($this->room->owner)->get($room_file->downloadLink())
            ->assertSuccessful();
    }

    public function testDownloadFilesDownloadDisabled()
    {
        $this->actingAs($this->room->owner)->postJson(route('api.v1.rooms.files.get', ['room'=>$this->room]), ['file' => $this->file_valid])
            ->assertSuccessful();
        $room_file = $this->room->files()->where('filename', $this->file_valid->name)->first();
        \Auth::logout();

        // Access as guest
        $this->get($room_file->downloadLink())
            ->assertForbidden();

        // Testing member
        $this->room->members()->attach($this->user, ['role'=>RoomUserRole::USER]);
        $this->actingAs($this->user)->get($room_file->downloadLink())
            ->assertForbidden();

        // Testing moderator member
        $this->room->members()->sync([$this->user->id,['role'=>RoomUserRole::MODERATOR]]);
        $this->actingAs($this->user)->get($room_file->downloadLink())
            ->assertForbidden();

        // Testing owner
        $this->actingAs($this->room->owner)->get($room_file->downloadLink())
            ->assertSuccessful();
    }

    public function testDownloadFilesDownloadUrlManipulation()
    {
        $this->actingAs($this->room->owner)->postJson(route('api.v1.rooms.files.get', ['room'=>$this->room]), ['file' => $this->file_valid])
            ->assertSuccessful();

        $other_room = factory(Room::class)->create();

        $room_file = $this->room->files()->where('filename', $this->file_valid->name)->first();

        // Testing for room without permission
        $this->actingAs($this->room->owner)->get(route('download.file', ['room'=>$other_room->id, 'roomFile' => $room_file,'filename'=>$room_file->filename]))
            ->assertForbidden();

        // Testing for room with permission
        $other_room->owner()->associate($this->room->owner);
        $other_room->save();
        $this->actingAs($this->room->owner)->get(route('download.file', ['room'=>$other_room->id, 'roomFile' => $room_file,'filename'=>$room_file->filename]))
            ->assertNotFound();
    }

    public function testDownloadForBBB()
    {
        $this->actingAs($this->room->owner)->postJson(route('api.v1.rooms.files.get', ['room'=>$this->room]), ['file' => $this->file_valid])
            ->assertSuccessful();

        $room_file = $this->room->files()->where('filename', $this->file_valid->name)->first();

        \Auth::logout();

        $this->get($room_file->bbbDownloadLink())
            ->assertSuccessful();
    }

    public function testFilesDelete()
    {
        $this->actingAs($this->room->owner)->postJson(route('api.v1.rooms.files.get', ['room'=>$this->room]), ['file' => $this->file_valid])
            ->assertSuccessful();
        $room_file = $this->room->files()->where('filename', $this->file_valid->name)->first();

        Storage::disk('local')->assertExists($this->room->id.'/'.$this->file_valid->hashName());

        \Auth::logout();

        // Testing guest
        $this->deleteJson(route('api.v1.rooms.files.remove', ['room'=>$this->room->id, 'file' => $room_file]))
            ->assertUnauthorized();

        // Testing user
        $this->actingAs($this->user)->deleteJson(route('api.v1.rooms.files.remove', ['room'=>$this->room->id, 'file' => $room_file]))
            ->assertForbidden();

        // Testing member
        $this->room->members()->attach($this->user, ['role'=>RoomUserRole::USER]);
        $this->actingAs($this->user)->deleteJson(route('api.v1.rooms.files.remove', ['room'=>$this->room->id, 'file' => $room_file]))
            ->assertForbidden();

        // Testing moderator member
        $this->room->members()->sync([$this->user->id,['role'=>RoomUserRole::MODERATOR]]);
        $this->actingAs($this->user)->deleteJson(route('api.v1.rooms.files.remove', ['room'=>$this->room->id, 'file' => $room_file]))
            ->assertForbidden();

        // Testing owner
        $this->actingAs($this->room->owner)->deleteJson(route('api.v1.rooms.files.remove', ['room'=>$this->room->id, 'file' => $room_file]))
            ->assertSuccessful();

        // Testing delete again
        $this->actingAs($this->room->owner)->deleteJson(route('api.v1.rooms.files.remove', ['room'=>$this->room->id, 'file' => $room_file]))
            ->assertNotFound();

        // Check if file was deleted as well
        Storage::disk('local')->assertMissing($this->room->id.'/'.$this->file_valid->hashName());
    }

    public function testDeleteFileUrlManipulation()
    {
        $this->actingAs($this->room->owner)->postJson(route('api.v1.rooms.files.get', ['room'=>$this->room]), ['file' => $this->file_valid])
            ->assertSuccessful();

        $other_room = factory(Room::class)->create();

        $room_file = $this->room->files()->where('filename', $this->file_valid->name)->first();

        // Testing for room without permission
        $this->actingAs($this->room->owner)->deleteJson(route('api.v1.rooms.files.remove', ['room'=>$other_room->id, 'file' => $room_file]))
            ->assertForbidden();

        // Testing for room with permission
        $other_room->owner()->associate($this->room->owner);
        $other_room->save();
        $this->actingAs($this->room->owner)->deleteJson(route('api.v1.rooms.files.remove', ['room'=>$other_room->id, 'file' => $room_file]))
            ->assertNotFound();
    }
}
